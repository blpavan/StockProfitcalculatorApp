Notes on My Assessment Approach

Assessment Overview
The goal of this assessment is to create a function named maxProfit that calculates the optimal buying and selling strategy for a given stock based on its historical price data for a specified year. This function will be called from the main function,
which will handle user input and display the results.
Buy Date
Buy Price
Sell Date
Sell Price
Profit

To achieve the assessment, start by creating a main function that accepts command-line arguments for the stock name and year, validates the inputs,
now invokes the maxProfit function, and prints the resulting response object; then implement the maxProfit function, which takes the stock name and year as parameters,
parses the corresponding CSV file to determine the optimal buy and sell dates while adhering to the specified rules,
and returns an instance of a model class called StockPriceResourceObject that encapsulates the stock transaction details.

Project Implementation Overview
1. Main Class
The Main class serves as the entry point of the application. It handles user input by accepting command-line arguments for the stock name and year.

This class is responsible for:

Validating the input parameters.
Creating an instance of the StockProfitService class.
Invoking the maxProfit method form StockPriceCalculatorService class to perform the calculation.
Displaying the results to the user.

2. Service Class
The StockProfitService class encapsulates the logic required to calculate the maximum profit from the stock data. This class follows the SRP by focusing solely on the profit calculation process.

It does the following:

Parses the CSV file corresponding to the provided stock name.
Implements the algorithm to determine the optimal buy and sell dates and prices.
Constructs a response object that contains the relevant information about the transaction.

3. Model Class
The StockPriceResourceObject class acts as a data model that holds the results of the profit calculation.

It contains fields for:

Buy Date
Buy Price
Sell Date
Sell Price
Profit

This class adheres to SRP by solely representing the data structure without any business logic. It provides getters and setters for accessing and modifying its attributes.

Conclusion
By structuring the project in this way, I ensured that each class has a single responsibility, which improves maintainability and makes the codebase easier to understand.
Each class focuses on a specific aspect of the application, allowing for clearer organization and separation of concerns.
Additionally, by achieving around 83% code coverage with well-implemented unit tests, I ensured that the core functionality is thoroughly tested, which enhances the reliability and robustness of the system.
The added test cases cover both positive scenarios and edge cases, reducing the likelihood of bugs.